#ifndef hhtree_HH
#include <TBranch.h> 
#include <TTree.h> 
#include <TH1F.h> 
#include <TFile.h> 
#include <TBits.h> 
#include <vector> 
#include <unistd.h> 
using namespace std; 

class hhtree{
 private:
 protected:
   unsigned int index;
   int runNumber_;
   TBranch *runNumber_branch;
   bool runNumber_isLoaded;
   int RunNumber_;
   TBranch *RunNumber_branch;
   bool RunNumber_isLoaded;
   int m_mcChannelNumber_;
   TBranch *m_mcChannelNumber_branch;
   bool m_mcChannelNumber_isLoaded;
   int eventNumber_;
   TBranch *eventNumber_branch;
   bool eventNumber_isLoaded;
   float mcweight_;
   TBranch *mcweight_branch;
   bool mcweight_isLoaded;
   double m_weight_;
   TBranch *m_weight_branch;
   bool m_weight_isLoaded;
   int n_ph_;
   TBranch *n_ph_branch;
   bool n_ph_isLoaded;
   int n_el_;
   TBranch *n_el_branch;
   bool n_el_isLoaded;
   int n_mu_;
   TBranch *n_mu_branch;
   bool n_mu_isLoaded;
   int n_tau_;
   TBranch *n_tau_branch;
   bool n_tau_isLoaded;
   int n_top_;
   TBranch *n_top_branch;
   bool n_top_isLoaded;
   int n_b_;
   TBranch *n_b_branch;
   bool n_b_isLoaded;
   int n_jet_;
   TBranch *n_jet_branch;
   bool n_jet_isLoaded;
   int n_bjet_;
   TBranch *n_bjet_branch;
   bool n_bjet_isLoaded;
   float m_mgg_;
   TBranch *m_mgg_branch;
   bool m_mgg_isLoaded;
   int tru_n_muel_;
   TBranch *tru_n_muel_branch;
   bool tru_n_muel_isLoaded;
   int n_lep_;
   TBranch *n_lep_branch;
   bool n_lep_isLoaded;
   int lep_q_1_;
   TBranch *lep_q_1_branch;
   bool lep_q_1_isLoaded;
   int lep_q_2_;
   TBranch *lep_q_2_branch;
   bool lep_q_2_isLoaded;
   float lep_E_1_;
   TBranch *lep_E_1_branch;
   bool lep_E_1_isLoaded;
   float lep_E_2_;
   TBranch *lep_E_2_branch;
   bool lep_E_2_isLoaded;
   float lep_pt_1_;
   TBranch *lep_pt_1_branch;
   bool lep_pt_1_isLoaded;
   float lep_pt_2_;
   TBranch *lep_pt_2_branch;
   bool lep_pt_2_isLoaded;
   float lep_pt_3_;
   TBranch *lep_pt_3_branch;
   bool lep_pt_3_isLoaded;
   float lep_eta_1_;
   TBranch *lep_eta_1_branch;
   bool lep_eta_1_isLoaded;
   float lep_eta_2_;
   TBranch *lep_eta_2_branch;
   bool lep_eta_2_isLoaded;
   float lep_phi_1_;
   TBranch *lep_phi_1_branch;
   bool lep_phi_1_isLoaded;
   float lep_phi_2_;
   TBranch *lep_phi_2_branch;
   bool lep_phi_2_isLoaded;
   float ph_pt1_;
   TBranch *ph_pt1_branch;
   bool ph_pt1_isLoaded;
   float ph_eta1_;
   TBranch *ph_eta1_branch;
   bool ph_eta1_isLoaded;
   float ph_phi1_;
   TBranch *ph_phi1_branch;
   bool ph_phi1_isLoaded;
   float ph_E1_;
   TBranch *ph_E1_branch;
   bool ph_E1_isLoaded;
   float ph_parent1_;
   TBranch *ph_parent1_branch;
   bool ph_parent1_isLoaded;
   float ph_pt2_;
   TBranch *ph_pt2_branch;
   bool ph_pt2_isLoaded;
   float ph_eta2_;
   TBranch *ph_eta2_branch;
   bool ph_eta2_isLoaded;
   float ph_phi2_;
   TBranch *ph_phi2_branch;
   bool ph_phi2_isLoaded;
   float ph_E2_;
   TBranch *ph_E2_branch;
   bool ph_E2_isLoaded;
   float ph_parent2_;
   TBranch *ph_parent2_branch;
   bool ph_parent2_isLoaded;
   float ph_pt3_;
   TBranch *ph_pt3_branch;
   bool ph_pt3_isLoaded;
   float ph_eta3_;
   TBranch *ph_eta3_branch;
   bool ph_eta3_isLoaded;
   float ph_phi3_;
   TBranch *ph_phi3_branch;
   bool ph_phi3_isLoaded;
   float ph_parent3_;
   TBranch *ph_parent3_branch;
   bool ph_parent3_isLoaded;
   float bjet_pt_1_;
   TBranch *bjet_pt_1_branch;
   bool bjet_pt_1_isLoaded;
   float bjet_pt_2_;
   TBranch *bjet_pt_2_branch;
   bool bjet_pt_2_isLoaded;
   float bjet_pt_3_;
   TBranch *bjet_pt_3_branch;
   bool bjet_pt_3_isLoaded;
   float jet0_pt_1_;
   TBranch *jet0_pt_1_branch;
   bool jet0_pt_1_isLoaded;
   float jet0_pt_2_;
   TBranch *jet0_pt_2_branch;
   bool jet0_pt_2_isLoaded;
   float jet0_pt_3_;
   TBranch *jet0_pt_3_branch;
   bool jet0_pt_3_isLoaded;
   float jet0_pt_4_;
   TBranch *jet0_pt_4_branch;
   bool jet0_pt_4_isLoaded;
   float jet0_pt_5_;
   TBranch *jet0_pt_5_branch;
   bool jet0_pt_5_isLoaded;
   float jet0_pt_6_;
   TBranch *jet0_pt_6_branch;
   bool jet0_pt_6_isLoaded;
   float jet0_pt_7_;
   TBranch *jet0_pt_7_branch;
   bool jet0_pt_7_isLoaded;
   float jet0_pt_8_;
   TBranch *jet0_pt_8_branch;
   bool jet0_pt_8_isLoaded;
   float jet0_eta_1_;
   TBranch *jet0_eta_1_branch;
   bool jet0_eta_1_isLoaded;
   float jet0_eta_2_;
   TBranch *jet0_eta_2_branch;
   bool jet0_eta_2_isLoaded;
   float jet0_eta_3_;
   TBranch *jet0_eta_3_branch;
   bool jet0_eta_3_isLoaded;
   float jet0_eta_4_;
   TBranch *jet0_eta_4_branch;
   bool jet0_eta_4_isLoaded;
   float jet0_eta_5_;
   TBranch *jet0_eta_5_branch;
   bool jet0_eta_5_isLoaded;
   float jet0_eta_6_;
   TBranch *jet0_eta_6_branch;
   bool jet0_eta_6_isLoaded;
   float jet0_eta_7_;
   TBranch *jet0_eta_7_branch;
   bool jet0_eta_7_isLoaded;
   float jet0_eta_8_;
   TBranch *jet0_eta_8_branch;
   bool jet0_eta_8_isLoaded;
   float jet0_phi_1_;
   TBranch *jet0_phi_1_branch;
   bool jet0_phi_1_isLoaded;
   float jet0_phi_2_;
   TBranch *jet0_phi_2_branch;
   bool jet0_phi_2_isLoaded;
   float jet0_phi_3_;
   TBranch *jet0_phi_3_branch;
   bool jet0_phi_3_isLoaded;
   float jet0_phi_4_;
   TBranch *jet0_phi_4_branch;
   bool jet0_phi_4_isLoaded;
   float jet0_phi_5_;
   TBranch *jet0_phi_5_branch;
   bool jet0_phi_5_isLoaded;
   float jet0_phi_6_;
   TBranch *jet0_phi_6_branch;
   bool jet0_phi_6_isLoaded;
   float jet0_phi_7_;
   TBranch *jet0_phi_7_branch;
   bool jet0_phi_7_isLoaded;
   float jet0_phi_8_;
   TBranch *jet0_phi_8_branch;
   bool jet0_phi_8_isLoaded;
   float b_pt1_;
   TBranch *b_pt1_branch;
   bool b_pt1_isLoaded;
   float b_eta1_;
   TBranch *b_eta1_branch;
   bool b_eta1_isLoaded;
   float b_phi1_;
   TBranch *b_phi1_branch;
   bool b_phi1_isLoaded;
   float b_pt2_;
   TBranch *b_pt2_branch;
   bool b_pt2_isLoaded;
   float b_eta2_;
   TBranch *b_eta2_branch;
   bool b_eta2_isLoaded;
   float b_phi2_;
   TBranch *b_phi2_branch;
   bool b_phi2_isLoaded;
   float b_pt3_;
   TBranch *b_pt3_branch;
   bool b_pt3_isLoaded;
   float b_eta3_;
   TBranch *b_eta3_branch;
   bool b_eta3_isLoaded;
   float b_phi3_;
   TBranch *b_phi3_branch;
   bool b_phi3_isLoaded;
   int ph_pt_;
   TBranch *ph_pt_branch;
   bool ph_pt_isLoaded;
   int ph_eta_;
   TBranch *ph_eta_branch;
   bool ph_eta_isLoaded;
   int ph_phi_;
   TBranch *ph_phi_branch;
   bool ph_phi_isLoaded;
   int ph_parent_id_;
   TBranch *ph_parent_id_branch;
   bool ph_parent_id_isLoaded;
   int m_el_pt_;
   TBranch *m_el_pt_branch;
   bool m_el_pt_isLoaded;
   int m_el_eta_;
   TBranch *m_el_eta_branch;
   bool m_el_eta_isLoaded;
   int m_el_phi_;
   TBranch *m_el_phi_branch;
   bool m_el_phi_isLoaded;
   int m_el_E_;
   TBranch *m_el_E_branch;
   bool m_el_E_isLoaded;
   int m_el_pdg_;
   TBranch *m_el_pdg_branch;
   bool m_el_pdg_isLoaded;
   int m_mu_pt_;
   TBranch *m_mu_pt_branch;
   bool m_mu_pt_isLoaded;
   int m_mu_eta_;
   TBranch *m_mu_eta_branch;
   bool m_mu_eta_isLoaded;
   int m_mu_phi_;
   TBranch *m_mu_phi_branch;
   bool m_mu_phi_isLoaded;
   int m_mu_E_;
   TBranch *m_mu_E_branch;
   bool m_mu_E_isLoaded;
   int m_mu_pdg_;
   TBranch *m_mu_pdg_branch;
   bool m_mu_pdg_isLoaded;
   int tau_pt_;
   TBranch *tau_pt_branch;
   bool tau_pt_isLoaded;
   int tau_eta_;
   TBranch *tau_eta_branch;
   bool tau_eta_isLoaded;
   int top_pt_;
   TBranch *top_pt_branch;
   bool top_pt_isLoaded;
   int top_eta_;
   TBranch *top_eta_branch;
   bool top_eta_isLoaded;
   int b_pt_;
   TBranch *b_pt_branch;
   bool b_pt_isLoaded;
   int b_eta_;
   TBranch *b_eta_branch;
   bool b_eta_isLoaded;
   int b_phi_;
   TBranch *b_phi_branch;
   bool b_phi_isLoaded;
   int m_jet_pt_;
   TBranch *m_jet_pt_branch;
   bool m_jet_pt_isLoaded;
   int m_jet_eta_;
   TBranch *m_jet_eta_branch;
   bool m_jet_eta_isLoaded;
   int m_jet_phi_;
   TBranch *m_jet_phi_branch;
   bool m_jet_phi_isLoaded;
   int m_jet_m_;
   TBranch *m_jet_m_branch;
   bool m_jet_m_isLoaded;
   int m_jet_btag70_;
   TBranch *m_jet_btag70_branch;
   bool m_jet_btag70_isLoaded;
   int m_jet_btag77_;
   TBranch *m_jet_btag77_branch;
   bool m_jet_btag77_isLoaded;
   int m_jet_btag60_;
   TBranch *m_jet_btag60_branch;
   bool m_jet_btag60_isLoaded;
   int m_jet_btag85_;
   TBranch *m_jet_btag85_branch;
   bool m_jet_btag85_isLoaded;
   int jet_AK4_b_tag_;
   TBranch *jet_AK4_b_tag_branch;
   bool jet_AK4_b_tag_isLoaded;
   int susy_m_;
   TBranch *susy_m_branch;
   bool susy_m_isLoaded;
   int susy_pt_;
   TBranch *susy_pt_branch;
   bool susy_pt_isLoaded;
   int susy_eta_;
   TBranch *susy_eta_branch;
   bool susy_eta_isLoaded;
   int susy_phi_;
   TBranch *susy_phi_branch;
   bool susy_phi_isLoaded;
   int susy_pdg_;
   TBranch *susy_pdg_branch;
   bool susy_pdg_isLoaded;
   int m_njet_;
   TBranch *m_njet_branch;
   bool m_njet_isLoaded;
   int N_j_central_;
   TBranch *N_j_central_branch;
   bool N_j_central_isLoaded;
   double m_HT_;
   TBranch *m_HT_branch;
   bool m_HT_isLoaded;
   double m_HT_central_;
   TBranch *m_HT_central_branch;
   bool m_HT_central_isLoaded;
   double m_mass_multijet_;
   TBranch *m_mass_multijet_branch;
   bool m_mass_multijet_isLoaded;
   int m_nbjet_fixed60_;
   TBranch *m_nbjet_fixed60_branch;
   bool m_nbjet_fixed60_isLoaded;
   int m_nbjet_fixed80_;
   TBranch *m_nbjet_fixed80_branch;
   bool m_nbjet_fixed80_isLoaded;
   int m_nbjet_fixed70_;
   TBranch *m_nbjet_fixed70_branch;
   bool m_nbjet_fixed70_isLoaded;
   int m_nbjet_fixed85_;
   TBranch *m_nbjet_fixed85_branch;
   bool m_nbjet_fixed85_isLoaded;
   int N_lep_;
   TBranch *N_lep_branch;
   bool N_lep_isLoaded;
   int lep_flav_1_;
   TBranch *lep_flav_1_branch;
   bool lep_flav_1_isLoaded;
   int lep_flav_2_;
   TBranch *lep_flav_2_branch;
   bool lep_flav_2_isLoaded;
   double m_mll_;
   TBranch *m_mll_branch;
   bool m_mll_isLoaded;
   float m_H_;
   TBranch *m_H_branch;
   bool m_H_isLoaded;
   int m_nph_;
   TBranch *m_nph_branch;
   bool m_nph_isLoaded;
   int m_tau_pt_;
   TBranch *m_tau_pt_branch;
   bool m_tau_pt_isLoaded;
   int m_ntau_medium_;
   TBranch *m_ntau_medium_branch;
   bool m_ntau_medium_isLoaded;
   bool isPassed_;
   TBranch *isPassed_branch;
   bool isPassed_isLoaded;
   bool flag_passedIso_;
   TBranch *flag_passedIso_branch;
   bool flag_passedIso_isLoaded;
   bool flag_passedPID_;
   TBranch *flag_passedPID_branch;
   bool flag_passedPID_isLoaded;
   bool ph_isTight1_;
   TBranch *ph_isTight1_branch;
   bool ph_isTight1_isLoaded;
   bool ph_isTight2_;
   TBranch *ph_isTight2_branch;
   bool ph_isTight2_isLoaded;
   bool ph_isTight3_;
   TBranch *ph_isTight3_branch;
   bool ph_isTight3_isLoaded;
   bool ph_iso1_;
   TBranch *ph_iso1_branch;
   bool ph_iso1_isLoaded;
   bool ph_iso2_;
   TBranch *ph_iso2_branch;
   bool ph_iso2_isLoaded;
   bool ph_iso3_;
   TBranch *ph_iso3_branch;
   bool ph_iso3_isLoaded;
   double score_recotop1_;
   TBranch *score_recotop1_branch;
   bool score_recotop1_isLoaded;
   bool isPassedTriggerMatch_;
   TBranch *isPassedTriggerMatch_branch;
   bool isPassedTriggerMatch_isLoaded;
   float m_mpx_;
   TBranch *m_mpx_branch;
   bool m_mpx_isLoaded;
   float m_mpy_;
   TBranch *m_mpy_branch;
   bool m_mpy_isLoaded;
   float m_sumet_;
   TBranch *m_sumet_branch;
   bool m_sumet_isLoaded;
   float m_met_;
   TBranch *m_met_branch;
   bool m_met_isLoaded;
   float gnn_score_;
   TBranch *gnn_score_branch;
   bool gnn_score_isLoaded;
 
 
 public:
   void Init(TTree * tree);
   void GetEntry(unsigned int idx);
   void LoadAllBranches();
   const int &runNumber();
   const int &RunNumber();
   const int &m_mcChannelNumber();
   const int &eventNumber();
   const float &mcweight();
   const double &m_weight();
   const int &n_ph();
   const int &n_el();
   const int &n_mu();
   const int &n_tau();
   const int &n_top();
   const int &n_b();
   const int &n_jet();
   const int &n_bjet();
   const float &m_mgg();
   const int &tru_n_muel();
   const int &n_lep();
   const int &lep_q_1();
   const int &lep_q_2();
   const float &lep_E_1();
   const float &lep_E_2();
   const float &lep_pt_1();
   const float &lep_pt_2();
   const float &lep_pt_3();
   const float &lep_eta_1();
   const float &lep_eta_2();
   const float &lep_phi_1();
   const float &lep_phi_2();
   const float &ph_pt1();
   const float &ph_eta1();
   const float &ph_phi1();
   const float &ph_E1();
   const float &ph_parent1();
   const float &ph_pt2();
   const float &ph_eta2();
   const float &ph_phi2();
   const float &ph_E2();
   const float &ph_parent2();
   const float &ph_pt3();
   const float &ph_eta3();
   const float &ph_phi3();
   const float &ph_parent3();
   const float &bjet_pt_1();
   const float &bjet_pt_2();
   const float &bjet_pt_3();
   const float &jet0_pt_1();
   const float &jet0_pt_2();
   const float &jet0_pt_3();
   const float &jet0_pt_4();
   const float &jet0_pt_5();
   const float &jet0_pt_6();
   const float &jet0_pt_7();
   const float &jet0_pt_8();
   const float &jet0_eta_1();
   const float &jet0_eta_2();
   const float &jet0_eta_3();
   const float &jet0_eta_4();
   const float &jet0_eta_5();
   const float &jet0_eta_6();
   const float &jet0_eta_7();
   const float &jet0_eta_8();
   const float &jet0_phi_1();
   const float &jet0_phi_2();
   const float &jet0_phi_3();
   const float &jet0_phi_4();
   const float &jet0_phi_5();
   const float &jet0_phi_6();
   const float &jet0_phi_7();
   const float &jet0_phi_8();
   const float &b_pt1();
   const float &b_eta1();
   const float &b_phi1();
   const float &b_pt2();
   const float &b_eta2();
   const float &b_phi2();
   const float &b_pt3();
   const float &b_eta3();
   const float &b_phi3();
   const int &ph_pt();
   const int &ph_eta();
   const int &ph_phi();
   const int &ph_parent_id();
   const int &m_el_pt();
   const int &m_el_eta();
   const int &m_el_phi();
   const int &m_el_E();
   const int &m_el_pdg();
   const int &m_mu_pt();
   const int &m_mu_eta();
   const int &m_mu_phi();
   const int &m_mu_E();
   const int &m_mu_pdg();
   const int &tau_pt();
   const int &tau_eta();
   const int &top_pt();
   const int &top_eta();
   const int &b_pt();
   const int &b_eta();
   const int &b_phi();
   const int &m_jet_pt();
   const int &m_jet_eta();
   const int &m_jet_phi();
   const int &m_jet_m();
   const int &m_jet_btag70();
   const int &m_jet_btag77();
   const int &m_jet_btag60();
   const int &m_jet_btag85();
   const int &jet_AK4_b_tag();
   const int &susy_m();
   const int &susy_pt();
   const int &susy_eta();
   const int &susy_phi();
   const int &susy_pdg();
   const int &m_njet();
   const int &N_j_central();
   const double &m_HT();
   const double &m_HT_central();
   const double &m_mass_multijet();
   const int &m_nbjet_fixed60();
   const int &m_nbjet_fixed80();
   const int &m_nbjet_fixed70();
   const int &m_nbjet_fixed85();
   const int &N_lep();
   const int &lep_flav_1();
   const int &lep_flav_2();
   const double &m_mll();
   const float &m_H();
   const int &m_nph();
   const int &m_tau_pt();
   const int &m_ntau_medium();
   const bool &isPassed();
   const bool &flag_passedIso();
   const bool &flag_passedPID();
   const bool &ph_isTight1();
   const bool &ph_isTight2();
   const bool &ph_isTight3();
   const bool &ph_iso1();
   const bool &ph_iso2();
   const bool &ph_iso3();
   const double &score_recotop1();
   const bool &isPassedTriggerMatch();
   const float &m_mpx();
   const float &m_mpy();
   const float &m_sumet();
   const float &m_met();
   const float &gnn_score();
};   

#ifndef __CINT__   
extern hhtree hh;   
#endif   

#endif   
